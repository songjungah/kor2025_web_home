[ DAO : JDBC ] : java database connection
    - 자바에서  데이터베이스 와 상호작용 하기 위한 java 표준 라이브러리
    - SQL 직접 작성하고 실행하며 데이터베이스 연결과 관리한다.
    - 주요 인터페이스
        1. Connection       :데이터베이스 연결 관리
        2. PreparedStatement:SQL 실행 과 매개변수 관리
        3. ResultSet        :SQL 실행 결과(조회 데이터) 관리

[ JPA vs mybatis ]
    - 실무에서는 어떠한 기능을 더 요구하나요? 과거에는 mybatis 많았고 요즘 JPA 많이 사용된다.
    - 대규모 프로젝트 에서는 같이 JPA/mybatis 해서 사용한다.

[ mybatis ]
    1.정의: 객체와 데이터베이스 간의 SQL매핑을 자동화 해주는 프레임워크.
    2.특징
        1. SQL 매핑 : SQL을 XML 파일 과 어노테이션 에 작성하여 자바객체와 매핑
        2. 결과 매핑 : SQL 쿼리 결과를 자동으로 자바 객체로 자동 타입변환
        3. 유연성 : 복잡한 쿼리 와 제어도 가능하다.
        4. 스프링과 통합 가능하다.
    3. 사용법
        1. 프로젝트내 mybatis 설치한다. , https://start.spring.io/
            [ 마이바티스]
                implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
            [ MYSQL JDBC]
                runtimeOnly 'com.mysql:mysql-connector-j'

        2. application.properties
            [ JDBC연동 ]
                spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
                spring.datasource.url = jdbc:mysql://localhost:3306/korweb
                spring.datasource.username = root
                spring.datasource.password = 1234
            [ SQL 이 작성된 .xml 파일 경로 설정 ] , xml파일 이용하여 자바 객체와 매핑하는 기술
                mybatis.mapper-locations = classpath:mybatis/mapper/*.xml
                * .xml 파일이 존재하는 경로를 설정 , *:와일드카드뜻(모든 .xml 뜻 )

        3. mybatis 활용
            1. 인터페이스 파일 생성한다.
                public interface ProductMapper{}
            2. 해당 인터페이스 위에 @Mapper 주입한다.
                @Mapper
                public interface ProductMapper{}
            3. 해당 인터페이스내 각 기능 SQL별 추상메소드 작성한다.
                반환타입 메소드명( 매개변수타입 매개변수명 );
                * 주의할점 , 자동 지원
                1. 매개변수타입 과 매개변수명은 SQL 문에서 사용가능한 변수 , #{ 매개변수명 }
                    int bno ===>> "select * from board where bno = #{ bno }"
                    BoardDto boardDto ===>> "insert into board( title , content)values( #{ title } , #{ content } )"
                        !!!! : BoardDto안에 있는 멤버변수만 SQL매개변수로 사용이 가능하다.
                        즉] BoardDto에 title 과 content 존재하므로 SQL매개변수가 가능하다.
                2. 반환타입은 자동으로 타입변환 해준다.
                    int ===>> sql 처리된 레코드 수 반환
                    boolean ===>> sql 처리 성공 여부 반환
                    List< DTO > ===>> sql 처리 결과 자동으로 DTO 반환


            ( 방법1 : SQL어노테이션 , 방법2 : XML 파일 ) 주의할점 : 동시에 2가지 방법으로 SQL 처리 할 수 없다.

            4. 방법1) 추상메소드 위에 어노테이션 , 간단한 query
                1. @Insert( "SQL" ) : 해당 SQL이 insert 실행 매개변수와 결과값을 자바 객체로 자동 타입변환
                2. @Select( "SQL" ) : 해당 SQL이 insert 실행 매개변수와 결과값을 자바 객체로 자동 타입변환
                3. @Update( "SQL" ) : 해당 SQL이 insert 실행 매개변수와 결과값을 자바 객체로 자동 타입변환
                4. @Delete( "SQL" ) : 해당 SQL이 insert 실행 매개변수와 결과값을 자바 객체로 자동 타입변환

            4. 방법2) .xml 파일에 sql 작성하여 추상메소드 매핑 , 복잡한/재활용 query
                * xml언어는 HTML 언어 와 동일하게 <>꺽은괄호(마크업) 언어
                    1.해당 파일의 버전과 인코딩 :
                                <?xml version="1.0" encoding="utf-8" ?> : XML파일의 첫번째 줄에 작성한다.
                    2.myBatis 문법검사,유효성검사,자동완성 등등 :
                                <!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
                                 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

                <mapper namespace="(1)매핑할 인터페이스 경로">
                    <SQL마크업 id ="(2)매핑할 인터페이스의 추상메소드명">
                    </SQL마크업>
                </mapper>

                (1) 매핑할 인터페이스 경로 : (src->main->java )이하부터 매핑할 인터페이스 경로
                (2) 매핑할 인터페이스의 추상메소드명 : <mapper> 마크업에 설정한 경로의 인터페이스내 매핑할 추상메소드명