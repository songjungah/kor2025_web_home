[ 서버 경로 ]
    * 서버란 : 자료를 제공하는 PC, SPRING(톰캣 내장 서버)
    *
        (코드가실행/배포 전) 개발자 코드 파일 경로 : 프로젝트명 -> src -> main -> java
                    C:\Users\admin\IdeaProjects\kor2024_web2\src\main\resources\static\img
                (코드가실행/배포 된) 서버내 코드 파일 경로 : 프로젝트명 -> build ->
                    C:\Users\admin\IdeaProjects\kor2024_web2\build\resources\main\static\img
    * 빌드 : 소스파일을 실행 가능한 파일로 컴파일 하는 과정
    * 서버에 필드한다 : 내 코드를 서버에 컴파일한다 > 내 코드를 서버에 배포한다
    ★ 중요 : 클라이언트는 개발자의 소스코드를 실행하는게 아니라, 클라이언트는 서버에 배포/빌드 된 코드를 실행시킨다.

    클라이언트 <----- HTTP 요청/응답 -----> 서버(build) <----- 실행/빌드 ----- 개발자코드작성(src)
    * 서버가 실행중인 상태에서 코드를 수정해도 클라이언트에 반영이 안되는 이유는 수정된 코드를 빌드하지 않았기 때문!
        즉, 코드 수정하면 서버를 재실행(재빌드)

[ 파일 업로드 ]
    1. 정의 : 클라이언트가 서버에서 첨부파일 보내고 서버가 첨부파일을 저장하는 행위
    2. 목적 : 프로필 사진등록, 제품사진 등록, 게시판 첨부파일 등록 등등
    3. 스프링 내장 함수 지원
        MultipartFile 클래스
            1. .getOriginalFilename() : 첨부파일의 파일명을 반환하는 함수
            2. .getName()             : 첨부파일이 들어있는 속성명 반환하는 함수
            3. .getSize()             : 첨부파일의 용량(바이트단위) 반환하는 함수
            4. .isEmpty()             : 첨부파일이 존재하는 여부 반환 함수
            5. *** .transferTo(file 객체 경로) *** : 지정된 경로에 첨부파일을 업로드 한다.
    4. 업로드 과정
        클라이언트(유저/크롬/JS) --- HTTP 업로드 ---> Controller ---> service ---> 서버내 폴더

        '짱구'.jpg ---> MultipartFile 타입 ---> 지정된 서버내 폴더에 '짱구.jpg' 파일 저장
    5. 업로드 방법
        1. 업로드 할 경로 지정한다. 주로 src 가 아닌 build(서버) 에 업로드 한다.
    6. 고려할 사항1 : 서로 다른 사람이 파일명을 동일하게 업로드 했을 때, 식별 불가능
        예] 유재석이 '짱구.jpg' 와 강호동이 '짱구.jpg' 업로드 식별 충돌
        방안] 식별자 추가
            1) 파일명 앞에 날짜/시간 붙여서 조합, 202401311123456-짱구.jpg
            2) UUID 라이브러리 사용하여 조합
                - UUID 란? 식별자 표준규약
                - 자동으로 중복이 희박한 임의 텍스트 생성
                uuid코드 - 짱구.jpg
            3) DB 테이블의 PK 번호 조합 등등

[ 파일 다운로드 ]
    1. 정의 : 서버가 클라이언트에게 첨부파일을 보내는 행위
    2. 목적 : 첨부파일 내려받기, 첨부파일 다운로드 등등
    3. 스프링 HTTP 내장 함수 지원
